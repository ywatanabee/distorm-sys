/* automatically generated by rust-bindgen 0.59.2 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const SEGMENT_DEFAULT: u32 = 128;
pub const OPCODE_ID_NONE: u32 = 0;
pub const FLAG_LOCK: u32 = 1;
pub const FLAG_REPNZ: u32 = 2;
pub const FLAG_REP: u32 = 4;
pub const FLAG_HINT_TAKEN: u32 = 8;
pub const FLAG_HINT_NOT_TAKEN: u32 = 16;
pub const FLAG_IMM_SIGNED: u32 = 32;
pub const FLAG_DST_WR: u32 = 64;
pub const FLAG_RIP_RELATIVE: u32 = 128;
pub const FLAG_PRIVILEGED_INSTRUCTION: u32 = 32768;
pub const REGS64_BASE: u32 = 0;
pub const REGS32_BASE: u32 = 16;
pub const REGS16_BASE: u32 = 32;
pub const REGS8_BASE: u32 = 48;
pub const REGS8_REX_BASE: u32 = 64;
pub const SREGS_BASE: u32 = 68;
pub const FPUREGS_BASE: u32 = 75;
pub const MMXREGS_BASE: u32 = 83;
pub const SSEREGS_BASE: u32 = 91;
pub const AVXREGS_BASE: u32 = 107;
pub const CREGS_BASE: u32 = 123;
pub const DREGS_BASE: u32 = 132;
pub const OPERANDS_NO: u32 = 4;
pub const MAX_TEXT_SIZE: u32 = 48;
pub const RM_AX: u32 = 1;
pub const RM_CX: u32 = 2;
pub const RM_DX: u32 = 4;
pub const RM_BX: u32 = 8;
pub const RM_SP: u32 = 16;
pub const RM_BP: u32 = 32;
pub const RM_SI: u32 = 64;
pub const RM_DI: u32 = 128;
pub const RM_FPU: u32 = 256;
pub const RM_MMX: u32 = 512;
pub const RM_SSE: u32 = 1024;
pub const RM_AVX: u32 = 2048;
pub const RM_CR: u32 = 4096;
pub const RM_DR: u32 = 8192;
pub const RM_R8: u32 = 16384;
pub const RM_R9: u32 = 32768;
pub const RM_R10: u32 = 65536;
pub const RM_R11: u32 = 131072;
pub const RM_R12: u32 = 262144;
pub const RM_R13: u32 = 524288;
pub const RM_R14: u32 = 1048576;
pub const RM_R15: u32 = 2097152;
pub const RM_SEG: u32 = 4194304;
pub const D_CF: u32 = 1;
pub const D_PF: u32 = 4;
pub const D_AF: u32 = 16;
pub const D_ZF: u32 = 64;
pub const D_SF: u32 = 128;
pub const D_IF: u32 = 512;
pub const D_DF: u32 = 1024;
pub const D_OF: u32 = 2048;
pub const ISC_INTEGER: u32 = 1;
pub const ISC_FPU: u32 = 2;
pub const ISC_P6: u32 = 3;
pub const ISC_MMX: u32 = 4;
pub const ISC_SSE: u32 = 5;
pub const ISC_SSE2: u32 = 6;
pub const ISC_SSE3: u32 = 7;
pub const ISC_SSSE3: u32 = 8;
pub const ISC_SSE4_1: u32 = 9;
pub const ISC_SSE4_2: u32 = 10;
pub const ISC_SSE4_A: u32 = 11;
pub const ISC_3DNOW: u32 = 12;
pub const ISC_3DNOWEXT: u32 = 13;
pub const ISC_VMX: u32 = 14;
pub const ISC_SVM: u32 = 15;
pub const ISC_AVX: u32 = 16;
pub const ISC_FMA: u32 = 17;
pub const ISC_AES: u32 = 18;
pub const ISC_CLMUL: u32 = 19;
pub const DF_NONE: u32 = 0;
pub const DF_MAXIMUM_ADDR16: u32 = 1;
pub const DF_MAXIMUM_ADDR32: u32 = 2;
pub const DF_RETURN_FC_ONLY: u32 = 4;
pub const DF_STOP_ON_CALL: u32 = 8;
pub const DF_STOP_ON_RET: u32 = 16;
pub const DF_STOP_ON_SYS: u32 = 32;
pub const DF_STOP_ON_UNC_BRANCH: u32 = 64;
pub const DF_STOP_ON_CND_BRANCH: u32 = 128;
pub const DF_STOP_ON_INT: u32 = 256;
pub const DF_STOP_ON_CMOV: u32 = 512;
pub const DF_STOP_ON_HLT: u32 = 1024;
pub const DF_STOP_ON_PRIVILEGED: u32 = 2048;
pub const DF_STOP_ON_UNDECODEABLE: u32 = 4096;
pub const DF_SINGLE_BYTE_STEP: u32 = 8192;
pub const DF_FILL_EFLAGS: u32 = 16384;
pub const DF_USE_ADDR_MASK: u32 = 32768;
pub const DF_STOP_ON_FLOW_CONTROL: u32 = 2040;
pub const FC_NONE: u32 = 0;
pub const FC_CALL: u32 = 1;
pub const FC_RET: u32 = 2;
pub const FC_SYS: u32 = 3;
pub const FC_UNC_BRANCH: u32 = 4;
pub const FC_CND_BRANCH: u32 = 5;
pub const FC_INT: u32 = 6;
pub const FC_CMOV: u32 = 7;
pub const FC_HLT: u32 = 8;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const _DecodeType_Decode16Bits: _DecodeType = 0;
pub const _DecodeType_Decode32Bits: _DecodeType = 1;
pub const _DecodeType_Decode64Bits: _DecodeType = 2;
pub type _DecodeType = ::std::os::raw::c_uint;
pub type _OffsetType = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CodeInfo {
    pub codeOffset: _OffsetType,
    pub addrMask: _OffsetType,
    pub nextOffset: _OffsetType,
    pub code: *const u8,
    pub codeLen: ::std::os::raw::c_int,
    pub dt: _DecodeType,
    pub features: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__CodeInfo() {
    assert_eq!(
        ::std::mem::size_of::<_CodeInfo>(),
        48usize,
        concat!("Size of: ", stringify!(_CodeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_CodeInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_CodeInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CodeInfo>())).codeOffset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CodeInfo),
            "::",
            stringify!(codeOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CodeInfo>())).addrMask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CodeInfo),
            "::",
            stringify!(addrMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CodeInfo>())).nextOffset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_CodeInfo),
            "::",
            stringify!(nextOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CodeInfo>())).code as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_CodeInfo),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CodeInfo>())).codeLen as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_CodeInfo),
            "::",
            stringify!(codeLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CodeInfo>())).dt as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_CodeInfo),
            "::",
            stringify!(dt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CodeInfo>())).features as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_CodeInfo),
            "::",
            stringify!(features)
        )
    );
}
pub const _OperandType_O_NONE: _OperandType = 0;
pub const _OperandType_O_REG: _OperandType = 1;
pub const _OperandType_O_IMM: _OperandType = 2;
pub const _OperandType_O_IMM1: _OperandType = 3;
pub const _OperandType_O_IMM2: _OperandType = 4;
pub const _OperandType_O_DISP: _OperandType = 5;
pub const _OperandType_O_SMEM: _OperandType = 6;
pub const _OperandType_O_MEM: _OperandType = 7;
pub const _OperandType_O_PC: _OperandType = 8;
pub const _OperandType_O_PTR: _OperandType = 9;
pub type _OperandType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _Value {
    pub sbyte: i8,
    pub byte: u8,
    pub sword: i16,
    pub word: u16,
    pub sdword: i32,
    pub dword: u32,
    pub sqword: i64,
    pub qword: u64,
    pub addr: _OffsetType,
    pub ptr: _Value__bindgen_ty_1,
    pub ex: _Value__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Value__bindgen_ty_1 {
    pub seg: u16,
    pub off: u32,
}
#[test]
fn bindgen_test_layout__Value__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_Value__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_Value__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_Value__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_Value__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Value__bindgen_ty_1>())).seg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Value__bindgen_ty_1),
            "::",
            stringify!(seg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Value__bindgen_ty_1>())).off as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Value__bindgen_ty_1),
            "::",
            stringify!(off)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Value__bindgen_ty_2 {
    pub i1: u32,
    pub i2: u32,
}
#[test]
fn bindgen_test_layout__Value__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_Value__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(_Value__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<_Value__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(_Value__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Value__bindgen_ty_2>())).i1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Value__bindgen_ty_2),
            "::",
            stringify!(i1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Value__bindgen_ty_2>())).i2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Value__bindgen_ty_2),
            "::",
            stringify!(i2)
        )
    );
}
#[test]
fn bindgen_test_layout__Value() {
    assert_eq!(
        ::std::mem::size_of::<_Value>(),
        8usize,
        concat!("Size of: ", stringify!(_Value))
    );
    assert_eq!(
        ::std::mem::align_of::<_Value>(),
        8usize,
        concat!("Alignment of ", stringify!(_Value))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Value>())).sbyte as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Value),
            "::",
            stringify!(sbyte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Value>())).byte as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Value),
            "::",
            stringify!(byte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Value>())).sword as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Value),
            "::",
            stringify!(sword)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Value>())).word as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Value),
            "::",
            stringify!(word)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Value>())).sdword as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Value),
            "::",
            stringify!(sdword)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Value>())).dword as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Value),
            "::",
            stringify!(dword)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Value>())).sqword as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Value),
            "::",
            stringify!(sqword)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Value>())).qword as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Value),
            "::",
            stringify!(qword)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Value>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Value),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Value>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Value),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Value>())).ex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Value),
            "::",
            stringify!(ex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Operand {
    pub type_: u8,
    pub index: u8,
    pub size: u16,
}
#[test]
fn bindgen_test_layout__Operand() {
    assert_eq!(
        ::std::mem::size_of::<_Operand>(),
        4usize,
        concat!("Size of: ", stringify!(_Operand))
    );
    assert_eq!(
        ::std::mem::align_of::<_Operand>(),
        2usize,
        concat!("Alignment of ", stringify!(_Operand))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Operand>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Operand),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Operand>())).index as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(_Operand),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Operand>())).size as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_Operand),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DInst {
    pub imm: _Value,
    pub disp: u64,
    pub addr: _OffsetType,
    pub flags: u16,
    pub unusedPrefixesMask: u16,
    pub usedRegistersMask: u32,
    pub opcode: u16,
    pub ops: [_Operand; 4usize],
    pub opsNo: u8,
    pub size: u8,
    pub segment: u8,
    pub base: u8,
    pub scale: u8,
    pub dispSize: u8,
    pub meta: u16,
    pub modifiedFlagsMask: u16,
    pub testedFlagsMask: u16,
    pub undefinedFlagsMask: u16,
}
#[test]
fn bindgen_test_layout__DInst() {
    assert_eq!(
        ::std::mem::size_of::<_DInst>(),
        64usize,
        concat!("Size of: ", stringify!(_DInst))
    );
    assert_eq!(
        ::std::mem::align_of::<_DInst>(),
        8usize,
        concat!("Alignment of ", stringify!(_DInst))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DInst>())).imm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DInst),
            "::",
            stringify!(imm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DInst>())).disp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DInst),
            "::",
            stringify!(disp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DInst>())).addr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DInst),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DInst>())).flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_DInst),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DInst>())).unusedPrefixesMask as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(_DInst),
            "::",
            stringify!(unusedPrefixesMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DInst>())).usedRegistersMask as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_DInst),
            "::",
            stringify!(usedRegistersMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DInst>())).opcode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_DInst),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DInst>())).ops as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(_DInst),
            "::",
            stringify!(ops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DInst>())).opsNo as *const _ as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(_DInst),
            "::",
            stringify!(opsNo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DInst>())).size as *const _ as usize },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(_DInst),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DInst>())).segment as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_DInst),
            "::",
            stringify!(segment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DInst>())).base as *const _ as usize },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(_DInst),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DInst>())).scale as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(_DInst),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DInst>())).dispSize as *const _ as usize },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(_DInst),
            "::",
            stringify!(dispSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DInst>())).meta as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_DInst),
            "::",
            stringify!(meta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DInst>())).modifiedFlagsMask as *const _ as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(_DInst),
            "::",
            stringify!(modifiedFlagsMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DInst>())).testedFlagsMask as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_DInst),
            "::",
            stringify!(testedFlagsMask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DInst>())).undefinedFlagsMask as *const _ as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(_DInst),
            "::",
            stringify!(undefinedFlagsMask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WString {
    pub length: ::std::os::raw::c_uint,
    pub p: [::std::os::raw::c_uchar; 48usize],
}
#[test]
fn bindgen_test_layout__WString() {
    assert_eq!(
        ::std::mem::size_of::<_WString>(),
        52usize,
        concat!("Size of: ", stringify!(_WString))
    );
    assert_eq!(
        ::std::mem::align_of::<_WString>(),
        4usize,
        concat!("Alignment of ", stringify!(_WString))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WString>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_WString),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_WString>())).p as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_WString),
            "::",
            stringify!(p)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DecodedInst {
    pub offset: _OffsetType,
    pub size: ::std::os::raw::c_uint,
    pub mnemonic: _WString,
    pub operands: _WString,
    pub instructionHex: _WString,
}
#[test]
fn bindgen_test_layout__DecodedInst() {
    assert_eq!(
        ::std::mem::size_of::<_DecodedInst>(),
        168usize,
        concat!("Size of: ", stringify!(_DecodedInst))
    );
    assert_eq!(
        ::std::mem::align_of::<_DecodedInst>(),
        8usize,
        concat!("Alignment of ", stringify!(_DecodedInst))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DecodedInst>())).offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DecodedInst),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DecodedInst>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DecodedInst),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DecodedInst>())).mnemonic as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_DecodedInst),
            "::",
            stringify!(mnemonic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DecodedInst>())).operands as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_DecodedInst),
            "::",
            stringify!(operands)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DecodedInst>())).instructionHex as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_DecodedInst),
            "::",
            stringify!(instructionHex)
        )
    );
}
pub const _DecodeResult_DECRES_NONE: _DecodeResult = 0;
pub const _DecodeResult_DECRES_SUCCESS: _DecodeResult = 1;
pub const _DecodeResult_DECRES_MEMORYERR: _DecodeResult = 2;
pub const _DecodeResult_DECRES_INPUTERR: _DecodeResult = 3;
pub type _DecodeResult = ::std::os::raw::c_uint;
extern "C" {
    pub fn distorm_decompose64(
        ci: *mut _CodeInfo,
        result: *mut _DInst,
        maxInstructions: ::std::os::raw::c_uint,
        usedInstructionsCount: *mut ::std::os::raw::c_uint,
    ) -> _DecodeResult;
}
extern "C" {
    pub fn distorm_decode64(
        codeOffset: _OffsetType,
        code: *const ::std::os::raw::c_uchar,
        codeLen: ::std::os::raw::c_int,
        dt: _DecodeType,
        result: *mut _DecodedInst,
        maxInstructions: ::std::os::raw::c_uint,
        usedInstructionsCount: *mut ::std::os::raw::c_uint,
    ) -> _DecodeResult;
}
extern "C" {
    pub fn distorm_format64(ci: *const _CodeInfo, di: *const _DInst, result: *mut _DecodedInst);
}
extern "C" {
    pub fn distorm_version() -> ::std::os::raw::c_uint;
}
